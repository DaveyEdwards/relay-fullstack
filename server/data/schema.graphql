schema {
  query: RootQuery
  mutation: RootMutation
}

input addFeatureInput {
  # Name of feature
  name: String

  # Description of feature
  description: String

  # Url of feature
  url: String
  clientMutationId: String
}

type addFeaturePayload {
  viewer: Viewer
  changedFeatureEdge: changedFeatureEdge
  clientMutationId: String
}

input addUserInput {
  # Name of user
  name: String

  # Username of user
  username: String

  # Website of user
  website: String
  clientMutationId: String
}

type addUserPayload {
  viewer: Viewer
  changedUserEdge: changedUserEdge
  clientMutationId: String
}

# An edge in a connection.
type changedFeatureEdge {
  # The item at the end of the edge
  node: changedFeatureNode

  # A cursor for use in pagination
  cursor: String!
}

type changedFeatureNode {
  # Name of feature
  name: String

  # Description of feature
  description: String

  # Url of feature
  url: String
  _id: ID

  # The ID of an object
  id: ID!
}

# An edge in a connection.
type changedUserEdge {
  # The item at the end of the edge
  node: changedUserNode

  # A cursor for use in pagination
  cursor: String!
}

type changedUserNode {
  # Name of user
  name: String

  # Username of user
  username: String

  # Website of user
  website: String
  _id: ID

  # The ID of an object
  id: ID!
}

input deleteFeatureInput {
  id: ID!
  clientMutationId: String
}

type deleteFeaturePayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

input deleteUserInput {
  id: ID!
  clientMutationId: String
}

type deleteUserPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

type Feature implements Node {
  # Name of feature
  name: String

  # Description of feature
  description: String

  # Url of feature
  url: String
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type FeatureConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FeatureEdge]
  count: Float
}

# An edge in a connection.
type FeatureEdge {
  # The item at the end of the edge
  node: Feature

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

enum orderByFeature {
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  URL_ASC
  URL_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByUser {
  NAME_ASC
  NAME_DESC
  USERNAME_ASC
  USERNAME_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  _ID_ASC
  _ID_DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type RootMutation {
  addUser(input: addUserInput!): addUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
  deleteUser(input: deleteUserInput!): deleteUserPayload
  addFeature(input: addFeatureInput!): addFeaturePayload
  updateFeature(input: updateFeatureInput!): updateFeaturePayload
  deleteFeature(input: deleteFeatureInput!): deleteFeaturePayload
}

type RootQuery {
  user(id: ID!): User
  users(
    # The ID of a User
    id: [ID]

    # The ID of a User
    ids: [ID]
    orderBy: orderByUser

    # Name of user
    name: String

    # Username of user
    username: String

    # Website of user
    website: String
    _id: ID
  ): [User]
  feature(id: ID!): Feature
  features(
    # The ID of a Feature
    id: [ID]

    # The ID of a Feature
    ids: [ID]
    orderBy: orderByFeature

    # Name of feature
    name: String

    # Description of feature
    description: String

    # Url of feature
    url: String
    _id: ID
  ): [Feature]
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input updateFeatureInput {
  # Name of feature
  name: String

  # Description of feature
  description: String

  # Url of feature
  url: String
  id: ID!
  clientMutationId: String
}

type updateFeaturePayload {
  changedFeature: Feature
  clientMutationId: String
}

input updateUserInput {
  # Name of user
  name: String

  # Username of user
  username: String

  # Website of user
  website: String
  id: ID!
  clientMutationId: String
}

type updateUserPayload {
  changedUser: User
  clientMutationId: String
}

type User implements Node {
  # Name of user
  name: String

  # Username of user
  username: String

  # Website of user
  website: String
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Float
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  users(
    after: String
    first: Int
    before: String
    last: Int
    orderBy: orderByUser

    # Name of user
    name: String

    # Username of user
    username: String

    # Website of user
    website: String
    _id: ID
  ): UserConnection
  user(id: ID!): User
  features(
    after: String
    first: Int
    before: String
    last: Int
    orderBy: orderByFeature

    # Name of feature
    name: String

    # Description of feature
    description: String

    # Url of feature
    url: String
    _id: ID
  ): FeatureConnection
  feature(id: ID!): Feature
}
